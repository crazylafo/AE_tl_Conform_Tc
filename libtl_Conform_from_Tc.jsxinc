/**
 * Extends  After Effects Objects for the Conformation script
 * @version     1.1s
 */


 
//PROJET PART
function findFolderWithName  (name, createIt) {
    var create = createIt || undefined;
    var item;
    var project = app.project;
    for(var i=1;i<=project.numItems;i++) {
        if (project.item(i) instanceof FolderItem && project.item(i).name === name){
            item = project.item(i);
            break;
        }
    }

    if (createIt && !item) {
        item = project.items.addFolder(name)
    }

    return item;
}
function findCompWithName  (name) {
    var item = null;
    var project = app.project;
    for(var i=1;i<=project.numItems;i++) {
        if (project.item(i) instanceof CompItem && project.item(i).name === name){
            item = project.item(i);
            break;
        }
    }

    return item;
}

//FOLDER PART
/**
    * getCleanLayerSourceFile (in fsname)
    * @param {layer} 
    * @returns {file.fsNAme}   or {layerName}
    */
function getCleanLayerSourceFile (layer) {
        var sourceFile ="";
        try {
            if (layer.source.file) {
                sourceFile = layer.source.file.fsName;
                }
            }
        catch (e) {
            sourceFile = layer.name;
            }
        return sourceFile;
        }
function makeFilterList (filterArray){
    var filterList = "(";
   for (var i =0; i< filterArray.length; i ++)
   {
       if  (i ==0){
           filterList += "\\"+filterArray[i];
           }
       else {
           filterList += "|"+'\\'+filterArray[i];
           }
   }
    filterList += ")";
    return filterList;
   }

/**
 * Retrieve all files recursively matching filter
 * @param {String|RegExp} filter
 * @returns {Array} Array of file Objects {temporary  window} With progressBar
 */
function scanFilesWithProgressBar (folder,filter) {
    var filelist = [];
    var files = folder.getFiles();
    var tempWindow = new Window('palette');
    tempWindow.info = tempWindow.add("staticText",[0,0,200,50], "Scanning Files");
    tempWindow.progressScan = tempWindow.add("progressBar", undefined, 0, files.length);
    tempWindow.progressScan.preferredSize.width = 300;
    tempWindow.show();
    
    for (var i=0; i<files.length; i++) {
        tempWindow .progressScan.value = i;
        var file = files[i];
        if (file instanceof Folder) {
            var list = scanFilesWithProgressBar(file, filter)
            for(var j=0; j<list.length; j++) { filelist.push(list[j]); }
        } else if (file instanceof File) {
            if (file.name.match(filter)) filelist.push(file);
        }
    }

    tempWindow.close();

    return filelist;
}
 //FsName  
 /**
    * @@param {Array}String} 
    * @returns  Array {fsName}
    */
    function convertTofsName (list){
        for (var i=0; i< list.length; i++)
        {
            list[i] =list[i].fsName;
            }
        return list;
        }


//cmd WindowsOs Functions
 function listFilesWinOs (folder,filterArray) {
        var FsNFolder = folder.fsName;
        try{
            var fsProjFolder = app.project.file.parent.fsName;
            }
        catch(e){
            alert ("please, save your project before")
            return []
            }

        var listFiles= [];
         for (var i =0; i <filterArray.length; i++)
        {
            var command = 'cmd.exe  /c dir '+ FsNFolder+'\\*'+filterArray[i].toString()+' /s/b/o:n >>'+ fsProjFolder+'\\listSeq.txt';
            system.callSystem(command);
            }
        var listf= File (fsProjFolder+'\\listSeq.txt');
        listf.open("r");
        var listff = listf.read();
        listFiles =  listff.split(/\r\n|\n/);
        listf.close();
        system.callSystem('cmd.exe /c del '+fsProjFolder+'\\listSeq.txt');
        return listFiles;
        }
 function checkMediaInfoWinOs() {
        var mediaInfoInstalled = false;
        var basePath = Folder ("C:\\Program Files\\MediaInfo_CLI");
        var files = basePath.getFiles();
        for (var i=0; i<files.length; i++) {
            var file = files[i];
            if (file.name.toString() === "MediaInfo.exe"){
                 mediaInfoInstalled = true;
                 break;
                }
            }
        return mediaInfoInstalled
       }
function GenerateMediaInfoBatFile (scriptFolder, targetFolder){
    var batScript = '@echo off \r'+
                    'set "target='+targetFolder.fsName+'" \r'+
                    'set "output_file=\\mediaList.txt" \r'+
                    'set "mediainfo_path=C:\\Program Files\\MediaInfo_CLI\\MediaInfo.exe" \r'+
                    'echo ......LISTING FILES....... \r'+
                    'dir "%target%\\"*.mov /s/b/o:n> "%target%\\filelist.txt" \r'+
                    'echo .......READING FILES....... \r'+
                    '(for /F "usebackq delims=" %%i in ("%target%\\filelist.txt") do ( \r'+
                    '  echo %%i \r'+
                    ' "%mediainfo_path%"  -f --Output "%%i ">>"%target%\\%output_file%"\r'+
                    ' echo() \r'+
                    ') \r'+
                    'del "%target%\\filelist.txt" \r'+
                    'echo.'
    var batFile = new File(scriptFolder.fsName+'\\mediaList.bat');
    batFile.open('w');
    batFile.write(batScript.toString())
    batFile.close();
    return batFile
   }
/**
    * @param {folder} folder, int}
    * @returns  Array {mediainfo}
    */
   function cmdListMediasInFoldersWinOs(folder, sequenceNumber) {
       //For windows, the filter Array is defined in that batch file
       try{
            var FsNFolder = folder.fsName;
            var thisFile = new File($.fileName); 
            var scriptPath =  thisFile.parent; 
            var batFile = GenerateMediaInfoBatFile(scriptPath, FsNFolder);
            File(batFile).execute();
            var listmedias= File (FsNFolder+"\\mediaList.txt");
            listmedias.open("r");
            var listglobal =  listmedias.read();
            if (listglobal.toString().indexOf ("General") ==-1){
                system.callSystem('cmd.exe /c del '+FsNFolder+'\\mediaList.txt');
                return [sequenceNumber]};
            
            var mediaNumber  =sequenceNumber; // list number of detected sequences
            var mediaListArray= [];  //array to list class of each sequences
            var listInfo =  listglobal.split("\n");
            //separate each media in the list
            var media = splitMediaInfos (listInfo);
            mediaListArray.push (media)
            mediaListArray.unshift(mediaNumber);
            system.callSystem('cmd.exe /c del '+FsNFolder+'\\mediaList.txt');
            return mediaListArray;
            }
        catch(e){
            alert (e)
            }
        }
       
//terminal MacOs functions
      /**
    * @@param {string) 
    * @returns  String. with unix space notation}
    */
    function killspaceForUnix(name){
        if (name.toString().indexOf (" ") !=-1){
            newName  = name.toString().replace(/\s/g,'\\ ');
            }
        else
        {
             newName = name;
            }

        return newName
        ;
    }

     /**
    * @@param {Folder} folder,   String} 
    * @returns  Array {string list Files}
    */
    function listFilesMacOs (folder,filterArray) {
        var FsNFolder = folder.fsName;
        var unixFolder = killspaceForUnix(FsNFolder);
        var listFiles= [];
         for (var i =0; i <filterArray.length; i++)
        {
            var command = 'find '+unixFolder+' -type f -name "*'+filterArray[i].toString()+'" |sort >>'+unixFolder+'/listSeq.txt';

            system.callSystem(command);
            }
        var listf= File (FsNFolder  +"/listSeq.txt");
        listf.open("r");
        listff = listf.read();
        listFiles =  listff.split(/\r\n|\n/);
        listf.close();
        system.callSystem('rm '+ unixFolder+'/listSeq.txt');
        return listFiles;
        }


//Media Info functions
   /**
    * @param {folder} folder to create a temporary test file
    * @returns  bool} mediainfo) installed or not
    */
   function checkMediaInfoMacOs (folder) {
        var FsNFolder = folder.fsName;
        var unixFolder = killspaceForUnix(FsNFolder);
        var commandTerminal=   '/usr/local/bin/mediainfo  >>'+unixFolder+'/test.txt ';
        system.callSystem(commandTerminal);
        
        try
        {
             var  testFile= File (FsNFolder  +'/test.txt');
             system.callSystem('rm '+ unixFolder+'/test.txt');
            return true
            }
        catch (e)
        {
            return false
            }
       }
     /**
    * @param {String} mediainfo line
    * @returns  {String} mediainfo interrresting info part after the :)
    */
    function extractMediaInfo (thisString){
        var newString = thisString.toString().substring(thisString.toString().indexOf(":")+1); 
        return newString
        }
   
     /**
    * @param {folder} folder, array, int}
    * @returns  Array {mediainfo}
    */
   function cmdListMediasInFoldersMacOs(folder,   filterArray, sequenceNumber) {
        try{
             var FsNFolder = folder.fsName;
             var unixFolder = killspaceForUnix(FsNFolder);
             
            if (system.osName.toString().indexOf("Mac") !=-1) {
            for (var i =0; i <filterArray.length; i++){
                    var command = 'find '+unixFolder+' -type f -name "*'+filterArray[i].toString()+'" |sort >>'+unixFolder+'/listSeq.txt';
                    system.callSystem(command); 
                }
            var listf= File (FsNFolder  +"/listSeq.txt");
            }
            listf.open("r");
            listff = listf.read();
            var listMedia =  listff.split(/\r\n|\n/);
            listf.close();
           
            for (var i =0; i<  listMedia.length; i++)
            {
                var unixMedia = killspaceForUnix(listMedia[i]);
                var commandMedia=   '/usr/local/bin/mediainfo --Output '+unixMedia+' >>'+unixFolder+'/listMedias.txt ';
                 system.callSystem(commandMedia);
                }

            var listmedias= File (FsNFolder  +"/listMedias.txt");
             if (!listmedias) {alert ("Media info is not installed"); return}
            listmedias.open("r");
            var listglobal =  listmedias.read();
            if (listglobal.toString().indexOf ("General") ==-1){
                system.callSystem('rm '+ unixFolder +"/listMedias.txt");
                system.callSystem('rm '+ unixFolder+'/listSeq.txt');
                return [sequenceNumber]};
            
            var mediaNumber  =sequenceNumber; // list number of detected sequences
            var mediaListArray= [];  //array to list class of each sequences

            var listInfo =  listglobal.split("\n");
            //separate each media in the list
            
            var media= splitMediaInfos (listInfo);
            mediaListArray.push (media)
            mediaListArray.unshift(mediaNumber);
        
         system.callSystem('rm '+unixFolder+'/listSeq.txt');
         system.callSystem('rm '+unixFolder+"/listMedias.txt");
         return mediaListArray;
            }
        catch(e){
            alert (e)
            }
        }
 //Media info split info for mac and windows
 function splitMediaInfos (listInfo){
    media= {}; 
    for (var i =0; i< listInfo.length; i++) {  
        if (listInfo[i].toString().indexOf ("General") !=-1){
            mediaNumber  +=1;
            media.mediaMatricule =mediaNumber ;
            }
        
        if (listInfo [i].toString().indexOf ("Complete name") !=-1){
            media.fullFile =  extractMediaInfo  (listInfo[i].toString());
            media.fileExtension =   media.fullFile.substring(media.fullFile.lastIndexOf("."));
            media.reelName =  media.fullFile.substring (media.fullFile.lastIndexOf("/")+1,media.fullFile.lastIndexOf(".") );
            media.fileFolder = media.fullFile.substring (0, media.fullFile.lastIndexOf("/"));
           
            }
        if (listInfo[i].toString().indexOf ("Frame rate") !=-1){
            media.frameRate = parseFloat (extractMediaInfo  (listInfo[i].toString()));
        }
        if (listInfo[i].toString().indexOf ("TIM") !=-1){
            var tmpTcIn = extractMediaInfo  (listInfo[i].toString());
        }

        if (listInfo [i].toString().indexOf ("Duration") !=-1){
            var tmpDuration  = extractMediaInfo  (listInfo[i].toString());
            if (tmpDuration.toString().indexOf(" h") !=-1)
            {
                var tmpDurationh = tmpDuration.substring (0, tmpDuration.indexOf (" h"));
                var tmpDurationmin =tmpDuration.substring (tmpDuration.indexOf ("h")+1, tmpDuration.indexOf ("min")-1);
                var tmpDurationsec = tmpDuration.substring (tmpDuration.indexOf ("min")+4, tmpDuration.indexOf ("s")-1);
                if (tmpDuration.toString().indexOf("ms") !=-1){
                    var tmpDurationcentsec = tmpDuration.substring (tmpDuration.indexOf ("s")+1, tmpDuration.indexOf ("ms")-1);
                }
                else {var tmpDurationcentsec = 0}
            }
            else if (tmpDuration.toString().indexOf(" min") !=-1)
            {
                var tmpDurationmin= tmpDuration.substring (0, tmpDuration.indexOf (" min"));
                var tmpDurationsec = tmpDuration.substring (tmpDuration.indexOf ("min")+4, tmpDuration.indexOf ("s")-1);
                var tmpDurationcentsec = tmpDuration.substring (tmpDuration.indexOf ("s")+1, tmpDuration.indexOf ("ms")-1);
                if (tmpDuration.toString().indexOf("ms") !=-1){
                    var tmpDurationcentsec = tmpDuration.substring (tmpDuration.indexOf ("s")+1, tmpDuration.indexOf ("ms")-1);
                }
                else {var tmpDurationcentsec = 0}
                }

            else if (tmpDuration.toString().indexOf(" s") !=-1){
                var tmpDurationsec = tmpDuration.substring (0, tmpDuration.indexOf (" s"));
                if (tmpDuration.toString().indexOf("ms") !=-1){
                    var tmpDurationcentsec = tmpDuration.substring (tmpDuration.indexOf ("s")+1, tmpDuration.indexOf ("ms")-1);
                }
                else {var tmpDurationcentsec = 0}
                }
            else{
                var tmpDurationsec = 0;
                var tmpDurationcentsec = tmpDuration.substring (0, tmpDuration.indexOf ("ms")-1);
                }
        }
        if ((i ==  (listInfo.length-1)  ||  ( listInfo[i+1].toString().indexOf ("General") !=-1)) ){
             media.duration =parseInt (tmpDurationh*media.frameRate*60*60) +parseInt (tmpDurationmin*media.frameRate*60) + parseInt( tmpDurationsec*media.frameRate) + parseFloat (tmpDurationcentsec*media.frameRate/100);
             var timecodeGenericArray = [media.frameRate*60*60, media.frameRate*60,media.frameRate,1]; 
             if (tmpTcIn)
             {
                 var tmpArray = tmpTcIn.split (":");
                media.tcIn  =0;
                for (var j =0; j<tmpArray.length; j++)
                {
                    media.tcIn  += parseInt (tmpArray[j] *timecodeGenericArray[j] );
                    }
                media.tcOut =   media.tcIn + media.duration;
                 }
            }
        } 
    return media
    }

//Drop down lists (ddl)
    function cleanDdl (ddl) {
         for ( var i= ddl.items.length  ; i >0 ; i--) {
            ddl.remove (ddl.items[i]);
            }
        }
    function updateDdlWithFolders (ddl) {
        
         for(var i=1;i<=app.project.numItems; i++) {
            if (app.project.item(i) instanceof FolderItem){
                ddl.add("item", i+"."+ app.project.item(i).name);
                }
            }
        ddl.slection = 0;
        }
    function updateDdlWithLayers (ddl) {
        if (app.project.activeItem instanceof CompItem)
        {
            for(var i=1;i<=app.project.activeItem.numLayers; i++) {
            ddl.add("item", i+"."+ app.project.activeItem.layer(i).name);
            }
            ddl.slection = 0;
            }
        
        }
    function updateDdlWithNumLayers (ddl)  {
         if (app.project.activeItem instanceof CompItem) {
            for(var i=1;i<=app.project.activeItem.numLayers; i++) {
                ddl.add("item", i);
                }
            ddl.slection = 0;
            }
        }
    function returnIndexFromddl (selection){
         index = selection.toString().substr (0, selection.toString().indexOf("."));
         return  index;
        }
    
    
    //Effects management
    function refreshDdls (digicutddl, LayerInddl, LayerOutddl){ 

        cleanDdl (digicutddl) ;
        cleanDdl (LayerInddl);
        cleanDdl (LayerOutddl);
       
        updateDdlWithLayers (digicutddl) ;
        updateDdlWithNumLayers (LayerInddl);
        updateDdlWithNumLayers (LayerOutddl);
    }
 
    function checkForInstalledEffect(fxName){

        var effects = app.effects;

        for (var i = 0; i < effects.length; i++){
        if (effects[i].displayName ===  fxName.toString()){
            return true;
            }
        }
        return false;
    }
    function compareKeyTimes (keyA, keyB){

        var comparison = 0;
        if (keyA.timeKey> keyB.timeKey) {
            comparison = 1;
        } else if (keyA.timeKey < keyB.timeKey) {
            comparison = -1;
        }
        return comparison;
    }